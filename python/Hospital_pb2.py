# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Hospital.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='Hospital.proto',
  package='hospital',
  syntax='proto3',
  serialized_pb=_b('\n\x0eHospital.proto\x12\x08hospital\"S\n\x07Patient\x12\r\n\x05PESEL\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\x12+\n\x0c\x65xaminations\x18\x03 \x03(\x0b\x32\x15.hospital.Examination\"\xd7\x01\n\x0b\x45xamination\x12\r\n\x05PESEL\x18\x01 \x01(\t\x12\x10\n\x08\x64octorId\x18\x02 \x01(\x05\x12\x12\n\ndateDoctor\x18\x03 \x01(\t\x12\x0f\n\x07\x64\x61teLab\x18\x04 \x01(\t\x12\'\n\nparameters\x18\x05 \x03(\x0b\x32\x13.hospital.Parameter\x12\x34\n\nstatusCode\x18\x06 \x01(\x0e\x32 .hospital.Examination.StatusCode\"#\n\nStatusCode\x12\x0b\n\x07PENDING\x10\x00\x12\x08\n\x04\x44ONE\x10\x01\"Z\n\tParameter\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0c\n\x04unit\x18\x02 \x01(\t\x12\r\n\x05value\x18\x03 \x01(\x02\x12\x10\n\x08minValue\x18\x04 \x01(\x02\x12\x10\n\x08maxValue\x18\x05 \x01(\x02\"w\n\x0eSimpleResponse\x12\x37\n\nstatusCode\x18\x01 \x01(\x0e\x32#.hospital.SimpleResponse.StatusCode\x12\x0b\n\x03msg\x18\x02 \x01(\t\"\x1f\n\nStatusCode\x12\x06\n\x02OK\x10\x00\x12\t\n\x05\x45RROR\x10\x01\"\xbd\x01\n\x0c\x45xaminations\x12\x35\n\nstatusCode\x18\x01 \x01(\x0e\x32!.hospital.Examinations.StatusCode\x12\"\n\x07patient\x18\x02 \x01(\x0b\x32\x11.hospital.Patient\x12*\n\x0b\x65xamination\x18\x03 \x01(\x0b\x32\x15.hospital.Examination\"&\n\nStatusCode\x12\t\n\x05\x46OUND\x10\x00\x12\r\n\tNOT_FOUND\x10\x01\"\x1d\n\x0cPatientPESEL\x12\r\n\x05PESEL\x18\x01 \x01(\t\"\x89\x01\n\x08Patients\x12\x31\n\nstatusCode\x18\x01 \x01(\x0e\x32\x1d.hospital.Patients.StatusCode\x12\"\n\x07patient\x18\x02 \x01(\x0b\x32\x11.hospital.Patient\"&\n\nStatusCode\x12\t\n\x05\x46OUND\x10\x00\x12\r\n\tNOT_FOUND\x10\x01\"\x07\n\x05\x45mpty2P\n\rPatientSerice\x12?\n\x0b\x66indPatient\x12\x16.hospital.PatientPESEL\x1a\x16.hospital.Examinations0\x01\x32\xd1\x02\n\rDoctorService\x12\x35\n\x0c\x66indPatients\x12\x0f.hospital.Empty\x1a\x12.hospital.Patients0\x01\x12\x44\n\x10\x66indExaminations\x12\x16.hospital.PatientPESEL\x1a\x16.hospital.Examinations0\x01\x12@\n\x13\x66indExaminationsAll\x12\x0f.hospital.Empty\x1a\x16.hospital.Examinations0\x01\x12<\n\rcreatePatient\x12\x11.hospital.Patient\x1a\x18.hospital.SimpleResponse\x12\x43\n\x10orderExamination\x12\x15.hospital.Examination\x1a\x18.hospital.SimpleResponse2I\n\nLabService\x12;\n\x0e\x41\x64\x64\x45xamination\x12\x0f.hospital.Empty\x1a\x18.hospital.SimpleResponseB\x13\n\x0f\x61gh.sr.zad4.genP\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_EXAMINATION_STATUSCODE = _descriptor.EnumDescriptor(
  name='StatusCode',
  full_name='hospital.Examination.StatusCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='PENDING', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DONE', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=294,
  serialized_end=329,
)
_sym_db.RegisterEnumDescriptor(_EXAMINATION_STATUSCODE)

_SIMPLERESPONSE_STATUSCODE = _descriptor.EnumDescriptor(
  name='StatusCode',
  full_name='hospital.SimpleResponse.StatusCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='OK', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ERROR', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=511,
  serialized_end=542,
)
_sym_db.RegisterEnumDescriptor(_SIMPLERESPONSE_STATUSCODE)

_EXAMINATIONS_STATUSCODE = _descriptor.EnumDescriptor(
  name='StatusCode',
  full_name='hospital.Examinations.StatusCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='FOUND', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_FOUND', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=696,
  serialized_end=734,
)
_sym_db.RegisterEnumDescriptor(_EXAMINATIONS_STATUSCODE)

_PATIENTS_STATUSCODE = _descriptor.EnumDescriptor(
  name='StatusCode',
  full_name='hospital.Patients.StatusCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='FOUND', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_FOUND', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=696,
  serialized_end=734,
)
_sym_db.RegisterEnumDescriptor(_PATIENTS_STATUSCODE)


_PATIENT = _descriptor.Descriptor(
  name='Patient',
  full_name='hospital.Patient',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='PESEL', full_name='hospital.Patient.PESEL', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='hospital.Patient.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='examinations', full_name='hospital.Patient.examinations', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=28,
  serialized_end=111,
)


_EXAMINATION = _descriptor.Descriptor(
  name='Examination',
  full_name='hospital.Examination',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='PESEL', full_name='hospital.Examination.PESEL', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='doctorId', full_name='hospital.Examination.doctorId', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dateDoctor', full_name='hospital.Examination.dateDoctor', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dateLab', full_name='hospital.Examination.dateLab', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='parameters', full_name='hospital.Examination.parameters', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='statusCode', full_name='hospital.Examination.statusCode', index=5,
      number=6, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _EXAMINATION_STATUSCODE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=114,
  serialized_end=329,
)


_PARAMETER = _descriptor.Descriptor(
  name='Parameter',
  full_name='hospital.Parameter',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='hospital.Parameter.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='unit', full_name='hospital.Parameter.unit', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='hospital.Parameter.value', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='minValue', full_name='hospital.Parameter.minValue', index=3,
      number=4, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='maxValue', full_name='hospital.Parameter.maxValue', index=4,
      number=5, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=331,
  serialized_end=421,
)


_SIMPLERESPONSE = _descriptor.Descriptor(
  name='SimpleResponse',
  full_name='hospital.SimpleResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='statusCode', full_name='hospital.SimpleResponse.statusCode', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='hospital.SimpleResponse.msg', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _SIMPLERESPONSE_STATUSCODE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=423,
  serialized_end=542,
)


_EXAMINATIONS = _descriptor.Descriptor(
  name='Examinations',
  full_name='hospital.Examinations',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='statusCode', full_name='hospital.Examinations.statusCode', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='patient', full_name='hospital.Examinations.patient', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='examination', full_name='hospital.Examinations.examination', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _EXAMINATIONS_STATUSCODE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=545,
  serialized_end=734,
)


_PATIENTPESEL = _descriptor.Descriptor(
  name='PatientPESEL',
  full_name='hospital.PatientPESEL',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='PESEL', full_name='hospital.PatientPESEL.PESEL', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=736,
  serialized_end=765,
)


_PATIENTS = _descriptor.Descriptor(
  name='Patients',
  full_name='hospital.Patients',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='statusCode', full_name='hospital.Patients.statusCode', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='patient', full_name='hospital.Patients.patient', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _PATIENTS_STATUSCODE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=768,
  serialized_end=905,
)


_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='hospital.Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=907,
  serialized_end=914,
)

_PATIENT.fields_by_name['examinations'].message_type = _EXAMINATION
_EXAMINATION.fields_by_name['parameters'].message_type = _PARAMETER
_EXAMINATION.fields_by_name['statusCode'].enum_type = _EXAMINATION_STATUSCODE
_EXAMINATION_STATUSCODE.containing_type = _EXAMINATION
_SIMPLERESPONSE.fields_by_name['statusCode'].enum_type = _SIMPLERESPONSE_STATUSCODE
_SIMPLERESPONSE_STATUSCODE.containing_type = _SIMPLERESPONSE
_EXAMINATIONS.fields_by_name['statusCode'].enum_type = _EXAMINATIONS_STATUSCODE
_EXAMINATIONS.fields_by_name['patient'].message_type = _PATIENT
_EXAMINATIONS.fields_by_name['examination'].message_type = _EXAMINATION
_EXAMINATIONS_STATUSCODE.containing_type = _EXAMINATIONS
_PATIENTS.fields_by_name['statusCode'].enum_type = _PATIENTS_STATUSCODE
_PATIENTS.fields_by_name['patient'].message_type = _PATIENT
_PATIENTS_STATUSCODE.containing_type = _PATIENTS
DESCRIPTOR.message_types_by_name['Patient'] = _PATIENT
DESCRIPTOR.message_types_by_name['Examination'] = _EXAMINATION
DESCRIPTOR.message_types_by_name['Parameter'] = _PARAMETER
DESCRIPTOR.message_types_by_name['SimpleResponse'] = _SIMPLERESPONSE
DESCRIPTOR.message_types_by_name['Examinations'] = _EXAMINATIONS
DESCRIPTOR.message_types_by_name['PatientPESEL'] = _PATIENTPESEL
DESCRIPTOR.message_types_by_name['Patients'] = _PATIENTS
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY

Patient = _reflection.GeneratedProtocolMessageType('Patient', (_message.Message,), dict(
  DESCRIPTOR = _PATIENT,
  __module__ = 'Hospital_pb2'
  # @@protoc_insertion_point(class_scope:hospital.Patient)
  ))
_sym_db.RegisterMessage(Patient)

Examination = _reflection.GeneratedProtocolMessageType('Examination', (_message.Message,), dict(
  DESCRIPTOR = _EXAMINATION,
  __module__ = 'Hospital_pb2'
  # @@protoc_insertion_point(class_scope:hospital.Examination)
  ))
_sym_db.RegisterMessage(Examination)

Parameter = _reflection.GeneratedProtocolMessageType('Parameter', (_message.Message,), dict(
  DESCRIPTOR = _PARAMETER,
  __module__ = 'Hospital_pb2'
  # @@protoc_insertion_point(class_scope:hospital.Parameter)
  ))
_sym_db.RegisterMessage(Parameter)

SimpleResponse = _reflection.GeneratedProtocolMessageType('SimpleResponse', (_message.Message,), dict(
  DESCRIPTOR = _SIMPLERESPONSE,
  __module__ = 'Hospital_pb2'
  # @@protoc_insertion_point(class_scope:hospital.SimpleResponse)
  ))
_sym_db.RegisterMessage(SimpleResponse)

Examinations = _reflection.GeneratedProtocolMessageType('Examinations', (_message.Message,), dict(
  DESCRIPTOR = _EXAMINATIONS,
  __module__ = 'Hospital_pb2'
  # @@protoc_insertion_point(class_scope:hospital.Examinations)
  ))
_sym_db.RegisterMessage(Examinations)

PatientPESEL = _reflection.GeneratedProtocolMessageType('PatientPESEL', (_message.Message,), dict(
  DESCRIPTOR = _PATIENTPESEL,
  __module__ = 'Hospital_pb2'
  # @@protoc_insertion_point(class_scope:hospital.PatientPESEL)
  ))
_sym_db.RegisterMessage(PatientPESEL)

Patients = _reflection.GeneratedProtocolMessageType('Patients', (_message.Message,), dict(
  DESCRIPTOR = _PATIENTS,
  __module__ = 'Hospital_pb2'
  # @@protoc_insertion_point(class_scope:hospital.Patients)
  ))
_sym_db.RegisterMessage(Patients)

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'Hospital_pb2'
  # @@protoc_insertion_point(class_scope:hospital.Empty)
  ))
_sym_db.RegisterMessage(Empty)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\017agh.sr.zad4.genP\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PatientSericeStub(object):
    """SERVICES
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.findPatient = channel.unary_stream(
          '/hospital.PatientSerice/findPatient',
          request_serializer=PatientPESEL.SerializeToString,
          response_deserializer=Examinations.FromString,
          )


  class PatientSericeServicer(object):
    """SERVICES
    """

    def findPatient(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PatientSericeServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'findPatient': grpc.unary_stream_rpc_method_handler(
            servicer.findPatient,
            request_deserializer=PatientPESEL.FromString,
            response_serializer=Examinations.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'hospital.PatientSerice', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class DoctorServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.findPatients = channel.unary_stream(
          '/hospital.DoctorService/findPatients',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Patients.FromString,
          )
      self.findExaminations = channel.unary_stream(
          '/hospital.DoctorService/findExaminations',
          request_serializer=PatientPESEL.SerializeToString,
          response_deserializer=Examinations.FromString,
          )
      self.findExaminationsAll = channel.unary_stream(
          '/hospital.DoctorService/findExaminationsAll',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Examinations.FromString,
          )
      self.createPatient = channel.unary_unary(
          '/hospital.DoctorService/createPatient',
          request_serializer=Patient.SerializeToString,
          response_deserializer=SimpleResponse.FromString,
          )
      self.orderExamination = channel.unary_unary(
          '/hospital.DoctorService/orderExamination',
          request_serializer=Examination.SerializeToString,
          response_deserializer=SimpleResponse.FromString,
          )


  class DoctorServiceServicer(object):

    def findPatients(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def findExaminations(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def findExaminationsAll(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def createPatient(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def orderExamination(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DoctorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'findPatients': grpc.unary_stream_rpc_method_handler(
            servicer.findPatients,
            request_deserializer=Empty.FromString,
            response_serializer=Patients.SerializeToString,
        ),
        'findExaminations': grpc.unary_stream_rpc_method_handler(
            servicer.findExaminations,
            request_deserializer=PatientPESEL.FromString,
            response_serializer=Examinations.SerializeToString,
        ),
        'findExaminationsAll': grpc.unary_stream_rpc_method_handler(
            servicer.findExaminationsAll,
            request_deserializer=Empty.FromString,
            response_serializer=Examinations.SerializeToString,
        ),
        'createPatient': grpc.unary_unary_rpc_method_handler(
            servicer.createPatient,
            request_deserializer=Patient.FromString,
            response_serializer=SimpleResponse.SerializeToString,
        ),
        'orderExamination': grpc.unary_unary_rpc_method_handler(
            servicer.orderExamination,
            request_deserializer=Examination.FromString,
            response_serializer=SimpleResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'hospital.DoctorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class LabServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.AddExamination = channel.unary_unary(
          '/hospital.LabService/AddExamination',
          request_serializer=Empty.SerializeToString,
          response_deserializer=SimpleResponse.FromString,
          )


  class LabServiceServicer(object):

    def AddExamination(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_LabServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AddExamination': grpc.unary_unary_rpc_method_handler(
            servicer.AddExamination,
            request_deserializer=Empty.FromString,
            response_serializer=SimpleResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'hospital.LabService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPatientSericeServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """SERVICES
    """
    def findPatient(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPatientSericeStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """SERVICES
    """
    def findPatient(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_PatientSerice_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('hospital.PatientSerice', 'findPatient'): PatientPESEL.FromString,
    }
    response_serializers = {
      ('hospital.PatientSerice', 'findPatient'): Examinations.SerializeToString,
    }
    method_implementations = {
      ('hospital.PatientSerice', 'findPatient'): face_utilities.unary_stream_inline(servicer.findPatient),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PatientSerice_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('hospital.PatientSerice', 'findPatient'): PatientPESEL.SerializeToString,
    }
    response_deserializers = {
      ('hospital.PatientSerice', 'findPatient'): Examinations.FromString,
    }
    cardinalities = {
      'findPatient': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'hospital.PatientSerice', cardinalities, options=stub_options)


  class BetaDoctorServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def findPatients(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def findExaminations(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def findExaminationsAll(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def createPatient(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def orderExamination(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDoctorServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def findPatients(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def findExaminations(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def findExaminationsAll(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def createPatient(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    createPatient.future = None
    def orderExamination(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    orderExamination.future = None


  def beta_create_DoctorService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('hospital.DoctorService', 'createPatient'): Patient.FromString,
      ('hospital.DoctorService', 'findExaminations'): PatientPESEL.FromString,
      ('hospital.DoctorService', 'findExaminationsAll'): Empty.FromString,
      ('hospital.DoctorService', 'findPatients'): Empty.FromString,
      ('hospital.DoctorService', 'orderExamination'): Examination.FromString,
    }
    response_serializers = {
      ('hospital.DoctorService', 'createPatient'): SimpleResponse.SerializeToString,
      ('hospital.DoctorService', 'findExaminations'): Examinations.SerializeToString,
      ('hospital.DoctorService', 'findExaminationsAll'): Examinations.SerializeToString,
      ('hospital.DoctorService', 'findPatients'): Patients.SerializeToString,
      ('hospital.DoctorService', 'orderExamination'): SimpleResponse.SerializeToString,
    }
    method_implementations = {
      ('hospital.DoctorService', 'createPatient'): face_utilities.unary_unary_inline(servicer.createPatient),
      ('hospital.DoctorService', 'findExaminations'): face_utilities.unary_stream_inline(servicer.findExaminations),
      ('hospital.DoctorService', 'findExaminationsAll'): face_utilities.unary_stream_inline(servicer.findExaminationsAll),
      ('hospital.DoctorService', 'findPatients'): face_utilities.unary_stream_inline(servicer.findPatients),
      ('hospital.DoctorService', 'orderExamination'): face_utilities.unary_unary_inline(servicer.orderExamination),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DoctorService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('hospital.DoctorService', 'createPatient'): Patient.SerializeToString,
      ('hospital.DoctorService', 'findExaminations'): PatientPESEL.SerializeToString,
      ('hospital.DoctorService', 'findExaminationsAll'): Empty.SerializeToString,
      ('hospital.DoctorService', 'findPatients'): Empty.SerializeToString,
      ('hospital.DoctorService', 'orderExamination'): Examination.SerializeToString,
    }
    response_deserializers = {
      ('hospital.DoctorService', 'createPatient'): SimpleResponse.FromString,
      ('hospital.DoctorService', 'findExaminations'): Examinations.FromString,
      ('hospital.DoctorService', 'findExaminationsAll'): Examinations.FromString,
      ('hospital.DoctorService', 'findPatients'): Patients.FromString,
      ('hospital.DoctorService', 'orderExamination'): SimpleResponse.FromString,
    }
    cardinalities = {
      'createPatient': cardinality.Cardinality.UNARY_UNARY,
      'findExaminations': cardinality.Cardinality.UNARY_STREAM,
      'findExaminationsAll': cardinality.Cardinality.UNARY_STREAM,
      'findPatients': cardinality.Cardinality.UNARY_STREAM,
      'orderExamination': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'hospital.DoctorService', cardinalities, options=stub_options)


  class BetaLabServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddExamination(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaLabServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddExamination(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AddExamination.future = None


  def beta_create_LabService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('hospital.LabService', 'AddExamination'): Empty.FromString,
    }
    response_serializers = {
      ('hospital.LabService', 'AddExamination'): SimpleResponse.SerializeToString,
    }
    method_implementations = {
      ('hospital.LabService', 'AddExamination'): face_utilities.unary_unary_inline(servicer.AddExamination),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_LabService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('hospital.LabService', 'AddExamination'): Empty.SerializeToString,
    }
    response_deserializers = {
      ('hospital.LabService', 'AddExamination'): SimpleResponse.FromString,
    }
    cardinalities = {
      'AddExamination': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'hospital.LabService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
